
122. Best Time to Buy and Sell Stock II   (DP)
def maxProfit(self, prices: List[int]) -> int:
    if not prices:
        return 0
    res = 0
    for i in range(1,len(prices)):
        if prices[i]>prices[i-1]:
            res += prices[i]-prices[i-1]
    return res
______________________________________________________________________________

27. Remove Element  (Two Pointers)
def removeElement(self, nums: List[int], val: int) -> int:
    index = 0
    for i in range(len(nums)):
        if nums[i] != val:
            nums[index] = nums[i]
            index += 1
    return index
______________________________________________________________________________

7. Reverse Integer
def reverse(self, x: int) -> int:
    postive = x > 0
    num = abs(x)
    ans = 0
    while num > 0:
        ans = ans*10 + num%10
        num //= 10
    if postive:
        return ans if ans < 2**31-1 else 0
    return -ans if ans <= 2**31 else 0
______________________________________________________________________________

994. Rotting Oranges  (BFS)
def orangesRotting(self, grid: List[List[int]]) -> int:
    if not grid:
        return -1
    minutes = 0
    rows = len(grid)
    cols = len(grid[0])
    fresh = 0
    q = collections.deque([])
    for r in range(rows):
        for c in range(cols):
            if grid[r][c] == 1: fresh += 1
            if grid[r][c] == 2: q.append([r,c])
    dirs = [(0,1),(0,-1),(1,0),(-1,0)]
    while q:
        n = len(q)
        for _ in range(n):
            r,c = q.popleft()
            for dr,dc in dirs:
                if 0<=dr+r<rows and 0<=dc+c<cols and grid[dr+r][dc+c] == 1:
                    grid[dr+r][dc+c] = 2
                    q.append([dr+r,dc+c])
                    fresh -= 1
        minutes += 1
    if fresh:
        return -1
    return max(0,minutes-1)
______________________________________________________________________________

5291. Find Numbers with Even Number of Digits
def findNumbers(self, nums: List[int]) -> int:
    res = 0
    for n in nums:
        if len(str(n))%2 == 0:
            res += 1
    return res
______________________________________________________________________________

937. Reorder Data in Log Files
class Solution:
    def reorderLogFiles(self, logs: List[str]) -> List[str]:
        if not logs:
            return []
        nums = []
        letters = []
        for log in logs:
            s = log.split()
            if s[1].isdigit():
                nums.append(log)
            else:
                content = " ".join(s[1:])
                id = s[0]
                letters.append([content,id])
        letters.sort()
        return [letter[1]+" "+letter[0] for letter in letters] + nums

______________________________________________________________________________

21. Merge Two Sorted Lists  O(m+n)
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        if not l1 and not l2:
            return None
        if not l1: return l2
        if not l2: return l1
        head = ListNode(-1)
        l3 = head
        while l1 and l2:
            if l1.val < l2.val:
                l3.next = ListNode(l1.val)
                l1 = l1.next
            else:
                l3.next = ListNode(l2.val)
                l2 = l2.next
            l3 = l3.next
        l = l1 if l1 else l2
        while l:
            l3.next = ListNode(l.val)
            l3 = l3.next
            l = l.next
        return head.next
______________________________________________________________________________

572. Subtree of Another Tree    (DFS) O(m*n)
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:
        if not s and not t: return True
        if not s or not t: return False
        return self.dfs(s,t) or self.isSubtree(s.left,t) or self.isSubtree(s.right,t)

    def dfs(self,s,t):
        if not s and not t: return True
        if not s or not t: return False
        if s.val == t.val:
            return self.dfs(s.left,t.left) and self.dfs(s.right,t.right)
______________________________________________________________________________

155. Min Stack
class MinStack:

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.min = []
        self.stack = []

    def push(self, x: int) -> None:
        self.stack.append(x)
        if self.min:
            if x < self.min[-1]:
                self.min.append(x)
            else:
                self.min.append(self.min[-1])
        else:
            self.min.append(x)

    def pop(self) -> None:
        self.stack.pop()
        self.min.pop()

    def top(self) -> int:
        if self.stack:
            return self.stack[-1]

    def getMin(self) -> int:
        if self.min:
            return self.min[-1]
______________________________________________________________________________

205. Isomorphic Strings
def isIsomorphic(self, s: str, t: str) -> bool:
    if not s and not t: return True
    if len(s) != len(t): return False
    hashmap = dict()
    visited = set()
    for i in range(len(s)):
        if s[i] in hashmap:
            if t[i] != hashmap[s[i]]:
                return False
        else:
            if t[i] in visited:
                return False
            visited.add(t[i])
            hashmap[s[i]] = t[i]
    return True
______________________________________________________________________________

819. Most Common Word   (Heapq, Hashmap)
def mostCommonWord(self, paragraph: str, banned: List[str]) -> str:
    if not paragraph:
        return ''
    words = re.findall(r'\w+', paragraph.lower())
    h = []
    hashmap = collections.defaultdict(int)
    for word in words:
        if word not in banned:
            hashmap[word] += 1
    for key,count in hashmap.items():
        heapq.heappush(h,[-count,key])
    return heapq.heappop(h)[1]
______________________________________________________________________________

235. Lowest Common Ancestor of a Binary Search Tree   (DFS, BFS)
def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
    if not root:
        return
    if root.val > p.val and root.val > q.val:
        return self.lowestCommonAncestor(root.left,p,q)
    if root.val < p.val and root.val < q.val:
        return self.lowestCommonAncestor(root.right,p,q)
    return root
______________________________________________________________________________

100. Same Tree
def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
    if not p and not q: return True
    if not p or not q: return False
    if p.val != q.val:
        return False
    return self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)
______________________________________________________________________________

703. Kth Largest Element in a Stream  (Heapq)
def __init__(self, k: int, nums: List[int]):
    self.pool = nums
    self.k = k
    heapq.heapify(self.pool)
    while len(self.pool) > k:
        heapq.heappop(self.pool)

def add(self, val: int) -> int:
    if len(self.pool) < self.k:
        heapq.heappush(self.pool,val)
    else:
        if val > self.pool[0]:
            heapq.heapreplace(self.pool,val)
    return self.pool[0]
______________________________________________________________________________

202. Happy Number   O(LogN)
def isHappy(self, n: int) -> bool:
    cycle = set()
    while n not in cycle:
        cycle.add(n)
        temp = 0
        while n > 0:
            temp += (n%10)**2
            n //= 10
        if temp == 1:
            return True
        n = temp
    return False
______________________________________________________________________________

13. Roman to Integer
def romanToInt(self, s: str) -> int:
    table = {
        "I":1,
        "V":5,
        "X":10,
        "L":50,
        "C":100,
        "D":500,
        "M":1000
    }
    res = 0
    for i in range(len(s)-1,-1,-1):
        if i+1 < len(s):
            if table[s[i]] < table[s[i+1]]:
                res -= table[s[i]]
                continue
        res += table[s[i]]
    return res
______________________________________________________________________________

1128. Number of Equivalent Domino Pairs
def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:
    table = collections.defaultdict(int)
    for dx,dy in dominoes:
        t = min(dx,dy)*10 + max(dy,dx)
        table[t] += 1
    res = 0
    for value in table.values():
        res += value*(value-1)//2
    return res
______________________________________________________________________________

1099. Two Sum Less Than K
def twoSumLessThanK(self, nums: List[int], k: int) -> int:
    if not nums:
        return -1
    mx = float('-inf')
    nums.sort()
    left,right=0,len(nums)-1
    while left < right:
        t = nums[left]+nums[right]
        if t < k:
            mx = max(t,mx)
            left += 1
        else:
            right -= 1
    return mx if mx != float("-inf") else -1
______________________________________________________________________________

496. Next Greater Element I   (Stack, Hashmap) O(m+n)
def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
    table = {}
    stack = []
    n = len(nums2)
    for i in range(n-1,-1,-1):
        while stack and nums2[i] > stack[-1]:
            stack.pop()
        table[nums2[i]] = stack[-1] if stack else -1
        stack.append(nums2[i])
    return [table[n] for n in nums1]
______________________________________________________________________________

206. Reverse Linked List
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if not head or not head.next:
            return head
        pre = None
        while head:
            next1 = head.next
            head.next = pre
            pre = head
            head = next1
        return pre
______________________________________________________________________________

1046. Last Stone Weight
def lastStoneWeight(self, stones: List[int]) -> int:
    if not stones:
        return 0
    h = []
    for stone in stones:
        heapq.heappush(h,-stone)
    while len(h) > 1:
        x,y = heapq.heappop(h),heapq.heappop(h)
        smash = abs(x-y)
        if smash != 0:
            heapq.heappush(h,-smash)
    return -heapq.heappop(h) if h else 0
______________________________________________________________________________

136. Single Number    (XOR)
def singleNumber(self, nums: List[int]) -> int:
    a = 0
    for n in nums:
        a ^= n
    return a
______________________________________________________________________________

28. Implement strStr()
def strStr(self, haystack: str, needle: str) -> int:
    if not needle:
        return 0
    n1 = len(haystack)
    n2 = len(needle)
    for i in range(n1-n2+1):
        if haystack[i:i+n2] == needle:
            return i
    return -1
______________________________________________________________________________

33. Search in Rotated Sorted Array  (Binary Search)
def search(self, nums: List[int], target: int) -> int:
    left, right = 0, len(nums)-1
    while left <= right:
        mid = left +(right-left)//2
        if nums[mid] == target:
            return mid
        elif nums[left] > nums[mid]:
            if nums[mid] < target <= nums[right]:
                left = mid + 1
            else:
                right = mid - 1
        else:
            if nums[left] <= target < nums[mid]:
                right = mid - 1
            else:
                left = mid + 1
    return -1
______________________________________________________________________________

120. Triangle   (DP)
def minimumTotal(self, triangle: List[List[int]]) -> int:
    if not triangle: return 0
    dp = [0 for i in range(len(triangle[-1])+1)]
    for level in triangle[::-1]:
        for i in range(len(level)):
            dp[i] = min(dp[i],dp[i+1]) + level[i]
    return dp[0]
______________________________________________________________________________

146. LRU Cache  (DoubleLinkedList) O(1)
class Node:
    def __init__(self,key,value):
        self.key = key
        self.value = value
        self.next = None
        self.prev = None

class LRUCache:

    def __init__(self, capacity: int):
        self.head = Node(0,0)
        self.tail = Node(0,0)
        self.head.next = self.tail
        self.tail.prev = self.head
        self.capacity = capacity
        self.size = 0
        self.table = collections.defaultdict(Node)

    def get(self, key: int) -> int:
        if key not in self.table: return -1
        node = self.table[key]
        self.remove(node)
        self.addHead(node)
        return node.value

    def put(self, key: int, value: int) -> None:
        node = Node(key,value)
        if key in self.table:
            self.remove(self.table[key])
            self.addHead(node)
        else:
            if self.capacity == self.size:
                last = self.tail.prev
                self.remove(last)
            self.addHead(node)

    def remove(self,node):
        previous = node.prev
        next1 = node.next
        previous.next = next1
        next1.prev = previous
        self.size -= 1
        del self.table[node.key]

    def addHead(self,node):
        next1 = self.head.next
        self.head.next = node
        node.prev = self.head
        node.next = next1
        next1.prev = node
        self.table[node.key] = node
        self.size += 1
______________________________________________________________________________

636. Exclusive Time of Functions  (Stack)
def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:
    res = [0]*n
    stack = []
    s = logs[0].split(":")
    id = int(s[0])
    start = int(s[2])
    stack.append(id)
    for log in logs[1:]:
        s = log.split(":")
        id = int(s[0])
        status = s[1]
        time = int(s[2])
        if status == 'start':
            if stack:
                index = stack[-1]
                res[index] += time - start
            start = time
            stack.append(id)
        else:
            index = stack.pop()
            res[index] += time - start + 1
            start = time + 1
    return res
______________________________________________________________________________

79. Word Search (DFS, Backtracking) O(m*n*4^l) search(4^l), l = len(string)
def exist(self, board: List[List[str]], word: str) -> bool:
    if not board: return False
    rows = len(board)
    cols = len(board[0])
    for r in range(rows):
        for c in range(cols):
            if board[r][c] == word[0]:
                board[r][c] = '*'
                if self.dfs(board,rows,cols,r,c,word[1:]):
                    return True
                board[r][c] = word[0]
    return False

def dfs(self,board,rows,cols,r,c,word):
    if len(word)==0: return True
    dirs = [(0,1),(0,-1),(1,0),(-1,0)]
    for dr,dc in dirs:
        if 0<=dr+r<rows and 0<=dc+c<cols and board[dr+r][dc+c] == word[0]:
            board[dr+r][dc+c] = '*'
            if self.dfs(board,rows,cols,dr+r,dc+c,word[1:]):
                return True
            board[dr+r][dc+c] = word[0]
    return False
______________________________________________________________________________

277. Find the Celebrity
# The knows API is already defined for you.
# return a bool, whether a knows b
# def knows(a: int, b: int) -> bool:

class Solution:
    def findCelebrity(self, n: int) -> int:
        if n < 2:
            return -1
        candidate = 0
        for i in range(1,n):
            if knows(candidate,i):
                candidate = i
        for i in range(n):
            if i == candidate:
                continue
            if knows(candidate,i) or not knows(i,candidate):
                return -1
        return candidate
______________________________________________________________________________

74. Search a 2D Matrix
240. Search a 2D Matrix II
def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
    if not matrix: return False
    rows = len(matrix)-1
    cols = len(matrix[0])-1
    r = 0
    while cols >= 0 and rows >= r:
        if matrix[r][cols] == target:
            return True
        elif matrix[r][cols] > target:
            cols -= 1
        else:
            r += 1
    return False
______________________________________________________________________________

347. Top K Frequent Elements / TopNcompetitor / Buzzwords     (Heapq)
def topKFrequent(self, nums: List[int], k: int) -> List[int]:
    if not nums:
        return []
    table = collections.defaultdict(int)
    for n in nums:
        table[n] += 1

    h = []
    for key, value in table.items():
        heapq.heappush(h,[-value,key])
    return [heapq.heappop(h)[1] for i in range(k) if h]
______________________________________________________________________________

698. Partition to K Equal Sum Subsets   (Backtracking)  O(n!)
def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:
    total = sum(nums)
    if k == 0 or total%k != 0: return False
    visited = [False]*len(nums)
    total //= k
    if self.backtracking(nums,visited,0,0,total,k):
        return True
    return False

def backtracking(self,nums,visited,index,curSum,target,k):
    if k <= 1: return True
    if curSum == target:
        return self.backtracking(nums,visited,0,0,target,k-1)
    for i in range(index,len(nums)):
        if visited[i]: continue
        visited[i] = True
        if self.backtracking(nums,visited,i+1,curSum+nums[i],target,k):
            return True
        visited[i] = False
    return Fals
______________________________________________________________________________

138. Copy List with Random Pointer    （Hashmap）
def copyRandomList(self, head: 'Node') -> 'Node':
    if not head: return head
    hashmap = collections.defaultdict(Node)
    node = head
    while node:
        hashmap[node] = Node(node.val,None,None)
        node = node.next
    node = head
    while node:
        if node.next:
            hashmap[node].next = hashmap[node.next]
        if node.random:
            hashmap[node].random = hashmap[node.random]
        node = node.next
    return hashmap[head]

______________________________________________________________________________

200. Number of Islands  O(m*n)
def numIslands(self, grid: List[List[str]]) -> int:
    if not grid: return 0
    rows = len(grid)
    cols = len(grid[0])
    res = 0
    for r in range(rows):
        for c in range(cols):
            if grid[r][c] == '1':
                self.dfs(grid,rows,cols,r,c)
                res += 1
    return res

def dfs(self,grid,rows,cols,r,c):
    grid[r][c] = '0'
    dirs = [(1,0),(-1,0),(0,1),(0,-1)]
    for dr,dc in dirs:
        if 0<=dr+r<rows and 0<=dc+c<cols and grid[dr+r][dc+c] == '1':
            self.dfs(grid,rows,cols,dr+r,dc+c)
______________________________________________________________________________

36. Valid Sudoku        since its bound by 9x9, we are not able to tell the
                        time complexity, if it is NxN, its NP-complete problem.

def isValidSudoku(self, board: List[List[str]]) -> bool:
    if not board: return False
    rows = len(board)
    cols = len(board[0])
    for r in range(rows):
        for c in range(cols):
            if board[r][c] != '.':
                if not self.dfs(board,r,c):
                    return False
    return True

def dfs(self,board,r,c):
    value = board[r][c]
    board[r][c] = '.'
    for i in range(9):
        if board[i][c] == value: return False
        if board[r][i] == value: return False
    for i in range(3):
        for j in range(3):
            if board[r//3*3+i][c//3*3+j] == value: return False
    board[r][c] = value
    return True
______________________________________________________________________________

3. Longest Substring Without Repeating Characters   (Hashmap)
def lengthOfLongestSubstring(self, s: str) -> int:
    if not s:
        return 0
    hashmap = dict()
    res = 0
    start = 0
    for i in range(len(s)):
        if s[i] in hashmap and hashmap[s[i]] >= start:
            start = hashmap[s[i]] + 1
        hashmap[s[i]] = i
        res = max(res,i-start+1)
    return res
______________________________________________________________________________

209. Minimum Size Subarray Sum      (Two Pointers)
def minSubArrayLen(self, s: int, nums: List[int]) -> int:
    if not nums: return 0
    l,r,total=0,0,0
    ans = float('inf')
    while r < len(nums):
        total += nums[r]
        while total >= s:
            ans = min(ans,r-l+1)
            total -= nums[l]
            l += 1
        r += 1
    return ans if ans != float('inf') else 0
______________________________________________________________________________

Amazon OA:
-----------
Question: Optimal Utilization

Given 2 lists 'a' and 'b'. Each element is a pair of integers where the first
integer represents the unique id and the second integer represents a value.
Your task to find an element from 'a' and an element from 'b' such that the sum
of their values is less or equal to 'target' and such close to target as possible.
Return a list of ids of selected elements, if not pairs is possible, return []

Input:
a = [[1, 3], [2, 5], [3, 7], [4, 10]]
b = [[1, 2], [2, 3], [3, 4], [4, 5]]
target = 10
Output: [[2, 4], [3, 2]]

def findPair(a, b, target):   (Two Pointers)
    if not a or not b:
        return []
    ans = []
    diff = float('inf')
    a.sort(key=lambda x: x[1])
    b.sort(key=lambda x: x[1])
    left, right = 0, len(b) - 1
    while left < len(a) and right >= 0:
        aid, avalue = a[left]
        bid, bvalue = b[right]
        if target - avalue - bvalue == diff:
            ans.append([aid, bid])
        elif avalue + bvalue <= target and target - avalue - bvalue < diff:
            diff = target - avalue - bvalue
            ans.clear()
            ans.append([aid, bid])
        if avalue + bvalue < target:
            left += 1
        else:
            right -= 1
    return ans
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Question: Treasure Island / Min Distance to Remove the Obstacle (BFS)

You have a map that marks the location of a treasure island. Some of the map
area has jagged rocks and dangerous reefs. Other areas are safe to sail in.
There are other explorers trying to find the treasure. So you must figure out
a shortest route to the treasure island.

Assume the map area is a two dimensional grid, represented by a matrix of
characters. You must start from the top-left corner of the map and can move
one block up, down, left or right at a time. The treasure island is marked
as X in a block of the matrix. X will not be at the top-left corner. Any block
with dangerous rocks or reefs will be marked as D. You must not enter dangerous
blocks. You cannot leave the map area. Other areas O are safe to sail in.
The top-left corner is always safe. Output the minimum number of steps to get
to the treasure.

Input:
[['O', 'O', 'O', 'O'],
 ['D', 'O', 'D', 'O'],
 ['O', 'O', 'O', 'O'],
 ['X', 'D', 'D', 'O']]

Output: 5
Explanation: Route is (0, 0), (0, 1), (1, 1), (2, 1), (2, 0), (3, 0)
The minimum route takes 5 steps.

def findPath(matrix):         (BFS) O(MxN)
  if not matrix: return -1
  rows = len(matrix)
  cols = len(matrix[0])
  q = collections.deque([])
  q.append([0,0,0])
  matrix[0][0] = 'D'
  dirs = [(1,0),(-1,0),(0,1),(0,-1)]
  while q:
    n = len(q)
    for _ in range(n):
      r,c,step = q.popleft()
      for dr,dc in dirs:
        if 0<=dr+r<rows and 0<=dc+c<cols:
          if matrix[dr+r][dc+c] == 'X': return step + 1
          if matrix[dr+r][dc+c] == 'O':
            matrix[dr+r][dc+c] = 'D'
            q.append([dr+r,dc+c,step+1])
  return -1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

1135. Connecting cities with minimum cost/Min Cost to Connect All Nodes
def __init__(self,n):
    self.parent = [i for i in range(n+1)]
    self.rank = [i for i in range(n+1)]

def Find(self,u):
    if u != self.parent[u]:
        self.parent[u] = self.Find(self.parent[u])
    return self.parent[u]

def Union(self,u,v):
    pu,pv = self.Find(u),self.Find(v)
    if pu != pv:
        if self.rank[pu] > self.rank[pv]:
            self.parent[pv] = pu
        elif self.rank[pu] < self.rank[pv]:
            self.parent[pu] = pv
        else:
            self.parent[pv] = pu
        return True
    return False

class Solution:
def minimumCost(self, N: int, connections: List[List[int]]) -> int:
    connections.sort(key=lambda x:x[2])
    uf = UnionFind(N)
    res = 0
    for x,y,v in connections:
        if uf.Union(x,y):
            res += v
    group = set()
    for i in range(1,N+1):
        group.add(uf.Find(i))
    return res if len(group) == 1 else -1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 Min Cost to Connect All Nodes      (UnionFind)
 Input: n = 6, edges = [[1, 4], [4, 5], [2, 3]],
 newEdges = [[1, 2, 5], [1, 3, 10], [1, 6, 2], [5, 6, 5]]
 Output: 7

 class UnionFind:
    def __init__(self, n):
        self.parent = [i for i in range(n + 1)]
        self.rank = [1 for _ in range(n + 1)]

    def Find(self, u):
        if u != self.parent[u]:
            self.parent[u] = self.Find(self.parent[u])
        return self.parent[u]

    def Union(self, u, v):
        pu, pv = self.Find(u), self.Find(v)
        if pu == pv:
            return False
        else:
            if self.rank[pu] > self.rank[pv]:
                self.parent[pv] = pu
            elif self.rank[pu] < self.rank[pv]:
                self.parent[pu] = pv
            else:
                self.parent[pv] = pu
                self.rank[pu] += 1
        return True

    def isConnected(self, x, y):
        return self.Find(x) == self.Find(y)


class Solution:
    def MinCosttoConnectAllNodes(self, n, edges, newEdges):
        uf = UnionFind(n)
        res = 0
        for x, y in edges:
            if not uf.isConnected(x, y):
                uf.Union(x, y)
        newEdges.sort(key=lambda x: x[2])
        for x, y, cost in newEdges:
            if not uf.isConnected(x, y):
                uf.Union(x, y)
                res += cost

        groups = set()
        for i in range(1, n + 1):
            groups.add(uf.Find(i))
        return res if len(groups) == 1 else -1

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 Min Cost to Repair Edges     (UnionFind)
 class UnionFind:
     def __init__(self, n):
         self.parent = [i for i in range(n + 1)]
         self.rank = [1 for _ in range(n + 1)]

     def Find(self, u):
         if u != self.parent[u]:
             self.parent[u] = self.Find(self.parent[u])
         return self.parent[u]

     def Union(self, u, v):
         pu, pv = self.Find(u), self.Find(v)
         if pu == pv:
             return False
         else:
             if self.rank[pu] > self.rank[pv]:
                 self.parent[pv] = pu
             elif self.rank[pu] < self.rank[pv]:
                 self.parent[pu] = pv
             else:
                 self.parent[pv] = pu
                 self.rank[pu] += 1
         return True

     def isConnected(self, x, y):
         return self.Find(x) == self.Find(y)


 class Solution:
     def __init__(self):
         print('xnyz')

     def MinCosttoConnectAllNodes(self, n, edges, newEdges):
         uf = UnionFind(n)
         res = 0
         repair = collections.defaultdict(int)
         newEdges.sort(key=lambda x: x[2])

         for x, y, cost in newEdges:
             repair[(x, y)] = cost

         for x, y in edges:
             if (x, y) not in repair and not uf.isConnected(x, y):
                 uf.Union(x, y)

         for x, y in repair:
             if not uf.isConnected(x, y):
                 uf.Union(x, y)
                 res += repair[(x, y)]

         groups = set()
         for i in range(1, n + 1):
             groups.add(uf.Find(i))
         return res if len(groups) == 1 else -1

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

1102. Path With Maximum Minimum Value   (Heapq)
                                        O(MN logMN)
def maximumMinimumPath(self, matrix: List[List[int]]) -> int:
    if not matrix: return 0
    rows = len(matrix)
    cols = len(matrix[0])
    h = []
    heapq.heappush(h,(-matrix[0][0],0,0))
    matrix[0][0] = 0
    dirs = [(1,0),(-1,0),(0,-1),(0,1)]
    score = float('inf')
    while h:
        v,r,c = heapq.heappop(h)
        score = min(-v,score)
        if r == rows-1 and c == cols-1:
            return score
        for dr,dc in dirs:
            if 0<=dr+r<rows and 0<=dc+c<cols and matrix[dr+r][dc+c]:
                heapq.heappush(h,(-matrix[dr+r][dc+c],dr+r,dc+c))
                matrix[dr+r][dc+c] = 0
    return 0

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Max Of Min Altitudes          O(MN logMN)
Given a matrix with r rows and c columns, find the maximum score of a path
starting at [0, 0] and ending at [r-1, c-1]. The score of a path is the minimum
value in that path. For example, the score of the path 8 → 4 → 5 → 9 is 4.

Don't include the first or final entry. You can only move either down or right
at any point in time.

def maximumMinimumAltitudes(matrix):
  if not matrix: return 0
  rows = len(matrix)
  cols = len(matrix[0])
  h = []
  heapq.heappush(h,(float('-inf'),0,0))
  matrix[-1][-1] = float('inf')
  score = float('inf')
  dirs = [(0,1),(1,0)]
  while h:
    v,r,c = heapq.heappop(h)
    score = min(-v,score)
    if r == rows-1 and c == cols-1:
      return score
    for dr,dc in dirs:
      if dr+r<rows and dc+c<cols:
        heapq.heappush(h,(-matrix[dr+r][dc+c],dr+r,dc+c))
  return 0

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  1120. Maximum Average Subtree   (bottom-up)
  # class TreeNode:
  #     def __init__(self, x):
  #         self.val = x
  #         self.left = None
  #         self.right = None

  class Solution:
      def maximumAverageSubtree(self, root: TreeNode) -> float:
          self.res = 0
          self.dfs(root)
          return self.res

      def dfs(self,root):
          if not root:
              return [0,0.0]
          s1,t1 = self.dfs(root.left)
          s2,t2 = self.dfs(root.right)
          s = s1 + s2 + 1
          t = t1 + t2 + root.val
          self.res = max(self.res,t/s)
          return [s,t]

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    Maximum Average of n-ary Subtree

    class TreeNode:
      def __init__(self,x):
        self.val = x
        self.children = []

    class Solution:
      def maximumAverageSubtree(self,root):
        self.res = 0
        self.dfs(root)
        return self.res

      def dfs(self,root):
        if not root.children:
          return [1,root.val]
        total = root.val
        nodes = 1
        for child in root.children:
          n,t = self.dfs(child)
          total += t
          nodes += n
        self.res = max(self.res,total/nodes)
        return [nodes,total]

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Longest string made up of only vowels
You are given with a string . Your task is to remove at most two substrings of
any length from the given string such that the remaining string contains
vowels('a','e','i','o','u') only. Your aim is the maximize the length of the
remaining string. Output the length of remaining string after removal of at most
two substrings.
NOTE: The answer may be 0, i.e. removing the entire string.

Sample Input:
  earthpoblem
  letsgosomewhere

Sample Output:
3
2

def longestVowelsOnlySubstring(s):
    if not s:
        return
    count, aux, vowls = 0, [], tuple('aeiou')
    for c in s + 'z':
        if c in vowls:
            count += 1
        elif count:
            aux.append(count)
            count = 0
    if s[0] not in vowls:
        aux = [0] + aux
    if s[-1] not in vowls:
        aux = aux + [0]
    return (aux[0] + aux[-1] + max(aux[1:-1])) if len(aux) >= 3 else sum(aux)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  Assume numbers from 1-26 map to all lowercase letters.
  (Eg. 1->a, 2->b, 3->c .... 11->k, 12->l, 13->m).
  Given an sequence of numbers, return the all possible words you can make from
  that sequence.

  Example: Input: 123
  output: ["abc", "lc", "aw"]
  abc : 1->a, 2->b, 3->c lc : 12->l & 3->c aw: 1->a & 23->w

  You can assume you have a helper function numberToLetter(int number)
  that returns the corresponding letter

  def getComb(self, digits):
      self.table = {
          1: 'a',
          2: 'b',
          3: 'c',
          4: 'd',
          5: 'e',
          6: 'f',
          7: 'g',
          8: 'h',
          9: 'i',
          10: 'j',
          11: 'k',
          12: 'l',
          13: 'm',
          14: 'n',
          15: 'o',
          16: 'p',
          17: 'q',
          18: 'r',
          19: 's',
          20: 't',
          21: 'u',
          22: 'v',
          23: 'w',
          24: 'x',
          25: 'y',
          26: 'z',
      }
      self.res = []
      self.dfs(digits, 0, '')
      return self.res

  def dfs(self, digits, start, subset):
      if start >= len(digits):
          self.res.append(subset)
          return
      if int(digits[start]) in self.table:
          self.dfs(digits, start + 1, subset + self.table[int(digits[start])])
      if start < len(digits) - 1 and int(digits[start:start+2]) in self.table:
          self.dfs(digits, start+2, subset + self.table[int(digits[start: start + 2])])

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Amazon End:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
______________________________________________________________________________

1167. Minimum Cost to Connect Sticks / Connect Ropes / Merge Files
def connectSticks(self, sticks: List[int]) -> int:
    if not sticks: return 0
    heapq.heapify(sticks)
    ans = 0
    while len(sticks) > 1:
        x,y = heapq.heappop(sticks), heapq.heappop(sticks)
        s = x + y
        ans += s
        heapq.heappush(sticks,s)
    return ans
______________________________________________________________________________

59. Spiral Matrix II
def generateMatrix(self, n: int) -> List[List[int]]:
    if n == 0: return []
    matrix = [[0 for i in range(n)] for i in range(n)]
    c,r = 0,0
    rows = cols = n-1
    step = 1
    while r <= rows and c <= cols:
        for i in range(c,cols+1):
            matrix[r][i] = step
            step += 1
        r += 1

        for i in range(r,rows+1):
            matrix[i][cols] = step
            step += 1
        cols -= 1

        if rows >= r:
            for i in range(cols,c-1,-1):
                matrix[rows][i] = step
                step += 1
            rows -= 1

        if cols >= c:
            for i in range(rows,r-1,-1):
                matrix[i][c] = step
                step += 1
            c += 1
    return matrix
______________________________________________________________________________

5. Longest Palindromic Substring    (Manacher's Algorithm)  O(N)
def longestPalindrome(self, s: str) -> str:
    start, maxlen = 0, 1
    for i in range(len(s)):
        oddstart  = i - maxlen - 1
        evenstart = i - maxlen
        odd  = s[oddstart:i+1]
        even = s[evenstart:i+1]

        if oddstart >= 0 and odd == odd[::-1]:
            start = oddstart
            maxlen += 2
        elif evenstart >= 0 and even == even[::-1]:
            start = evenstart
            maxlen += 1
    return s[start:start+maxlen]
______________________________________________________________________________

505. The Maze II    (DFS,Heapq) O(M x N x Max(M,N)) for every current node chosen,
                                              we can travel up to a max depth
                                              of max(M,N) in any directions
def shortestDistance(self, maze: List[List[int]], start: List[int], destination: List[int]) -> int:
    if not maze:
        return -1
    dist = [[float('inf') for _ in range(len(maze[0]))] for _ in range(len(maze))]
    dist[start[0]][start[1]] = 0
    self.findPath(maze,start[0],start[1],destination,dist)
    return dist[destination[0]][destination[1]] if dist[destination[0]][destination[1]] != float('inf') else -1

def findPath(self,maze,r,c,destination,dist):
    h = []
    heapq.heappush(h,(0,r,c))
    dirs = [(1,0),(-1,0),(0,1),(0,-1)]
    while h:
        dd,rr,cc = heapq.heappop(h)
        for dr,dc in dirs:
            nr,nc=rr,cc
            count = 0
            while 0<=nr+dr<len(maze) and 0<=nc+dc<len(maze[0]) and maze[nr+dr][nc+dc] == 0:
                nr += dr
                nc += dc
                count += 1
            nd = count + dd
            if dist[nr][nc] > nd:
                dist[nr][nc] = nd
                if dist[destination[0]][destination[1]] <= nd:
                    continue
                heapq.heappush(h,(nd,nr,nc))
______________________________________________________________________________

64. Minimum Path Sum      (DP)
def minPathSum(self, grid: List[List[int]]) -> int:
    if not grid: return 0
    rows = len(grid)
    cols = len(grid[0])
    for r in range(1,rows):
        grid[r][0] += grid[r-1][0]

    for c in range(1,cols):
        grid[0][c] += grid[0][c-1]

    for r in range(1,rows):
        for c in range(1,cols):
            grid[r][c] += min(grid[r-1][c],grid[r][c-1])
    return grid[-1][-1]
______________________________________________________________________________

62. Unique Paths        (DP)
def uniquePaths(self, m: int, n: int) -> int:
    dp = [[0 for _ in range(m)] for _ in range(n)]
    for r in range(n):
        for c in range(m):
            if r == 0 or c == 0:
                dp[r][c] = 1
            else:
                dp[r][c] = dp[r-1][c] + dp[r][c-1]
    return dp[n-1][m-1]
______________________________________________________________________________

63. Unique Paths II   (DP)
def uniquePathsWithObstacles(self, matrix: List[List[int]]) -> int:
    rows = len(matrix)
    cols = len(matrix[0])
    dp = [[0 for _ in range(cols)] for _ in range(rows)]
    for r in range(rows):
        for c in range(cols):
            if matrix[r][c] == 1:
                dp[r][c] = 0
            elif r == 0 and c == 0:
                dp[r][c] = 1
            elif r == 0:
                dp[r][c] = dp[r][c-1]
            elif c == 0:
                dp[r][c] = dp[r-1][c]
            else:
                dp[r][c] = dp[r-1][c] + dp[r][c-1]
    return dp[rows-1][cols-1]
______________________________________________________________________________

56. Merge Intervals
def merge(self, intervals: List[List[int]]) -> List[List[int]]:
    if not intervals: return []
    res = []
    intervals.sort(key=lambda x:x[0])
    for interval in intervals:
        if not res or res[-1][1] < interval[0]:
            res.append(interval)
        else:
            res[-1][1] = max(res[-1][1],interval[1])
    return res
______________________________________________________________________________

701. Insert into a Binary Search Tree   O(LogN)
def insertIntoBST(self, root: TreeNode, val: int) -> TreeNode:
    if not root: return root
    node = root
    while node:
        if node.val > val:
            if node.left:
                node = node.left
            else:
                node.left = TreeNode(val)
                break
        else:
            if node.right:
                node = node.right
            else:
                node.right = TreeNode(val)
                break
    return root
______________________________________________________________________________

957. Prison Cells After N Days    (DP)
def prisonAfterNDays(self, cells: List[int], N: int) -> List[int]:
    if not cells: return cells
    n = N%14 if N%14 != 0 else 14
    for i in range(n):
        dp = cells.copy()
        for i in range(len(dp)):
            if i == 0 or i == len(dp) - 1:
                dp[i] = 0
            else:
                dp[i] = 1 if cells[i-1] == cells[i+1] else 0
        cells = dp.copy()
    return cells
______________________________________________________________________________

763. Partition Labels         (Greedy)
def partitionLabels(self, s: str) -> List[int]:
    if not s: return []
    table = collections.defaultdict(int)
    for i in range(len(s)):
        table[s[i]] = i

    start = end = 0
    res = []
    for i in range(len(s)):
        end = max(end,table[s[i]])
        if end == i:
            res.append(end-start+1)
            start = end + 1
    return res
______________________________________________________________________________

253. Meeting Rooms II   (Heapq)
def minMeetingRooms(self, intervals: List[List[int]]) -> int:
    if not intervals:
        return 0
    intervals.sort(key=lambda x:x[0])
    rooms = []
    for interval in intervals:
        if rooms and interval[0] >= rooms[0]:
            heapq.heapreplace(rooms,interval[1])
        else:
            heapq.heappush(rooms,interval[1])
    return len(rooms)
______________________________________________________________________________

1054. Distant Barcodes    (heapq, hashmap)    O(NlogA)
                                              N: length of s
                                              A: size of digits
def rearrangeBarcodes(self, barcodes: List[int]) -> List[int]:
    count = collections.defaultdict(int)
    for i in barcodes:
        count[i] += 1
    h = []
    for key, value in count.items():
        heapq.heappush(h,[-value,key])
    res = []
    while len(h) > 1:
        v1,k1 = heapq.heappop(h)
        v2,k2 = heapq.heappop(h)
        res.append(k1)
        res.append(k2)
        v1 += 1
        v2 += 1
        if v1 < 0:
            heapq.heappush(h,[v1,k1])
        if v2 < 0:
            heapq.heappush(h,[v2,k2])
    if h:
        res.append(heapq.heappop(h)[1])
    return res
______________________________________________________________________________

545. Boundary of Binary Tree    (O(N)), preOrder for leftBoundary
                                        inOrder for leaves
                                        postOrder for rightBoundary
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def boundaryOfBinaryTree(self, root: TreeNode) -> List[int]:
        if not root: return []
        self.res = [root.val]
        self.leftBoundary(root.left)
        self.leaves(root,root)
        self.rightBoundary(root.right)
        return self.res

    def leftBoundary(self,root):
        if not root or root.left == root.right:
            return
        self.res.append(root.val)
        if root.left:
            self.leftBoundary(root.left)
        else:
            self.leftBoundary(root.right)

    def leaves(self,node,root):
        if not node:
            return
        self.leaves(node.left,root)
        if node != root and node.left == node.right:
            self.res.append(node.val)
        self.leaves(node.right,root)

    def rightBoundary(self,root):
        if not root or root.left == root.right:
            return
        if root.right:
            self.rightBoundary(root.right)
        else:
            self.rightBoundary(root.left)
        self.res.append(root.val)

______________________________________________________________________________

221. Maximal Square   (DP)
def maximalSquare(self, matrix: List[List[str]]) -> int:
    if not matrix:
        return 0
    rows = len(matrix)
    cols = len(matrix[0])
    dp = [[0 for _ in range(cols)] for _ in range(rows)]

    for r in range(rows):
        for c in range(cols):
            if matrix[r][c] == '1':
                if r == 0 or c == 0:
                    dp[r][c] = 1
                else:
                    dp[r][c] = min(dp[r-1][c-1],dp[r-1][c],dp[r][c-1]) + 1
    return max(map(max,dp))**2
______________________________________________________________________________

49. Group Anagrams        O(NK) N: length of String, K: max size of substring

def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
    if not strs: return []
    table = collections.defaultdict(list)
    for s in strs:
        count = [0]*26
        for c in s:
            count[ord(c) - ord('a')] += 1
        table[tuple(count)].append(s)
    return table.values()
______________________________________________________________________________

139. Word Break           (DP)
def wordBreak(self, s: str, wordDict: List[str]) -> bool:
    dp = [True]+[False]*len(s)
    for i in range(len(dp)):
        for word in wordDict:
            if dp[i]:
                length = len(word)
                if i + length < len(dp) and s[i:i+length] == word:
                    dp[i+length] = True
    return dp[-1]
______________________________________________________________________________

199. Binary Tree Right Side View    (BFS)
def rightSideView(self, root: TreeNode) -> List[int]:
    if not root: return []
    q = collections.deque([])
    q.append(root)
    res = []
    while q:
        n = len(q)
        for i in range(n):
            node = q.popleft()
            if i == n-1:
                res.append(node.val)
            if node.left:
                q.append(node.left)
            if node.right:
                q.append(node.right)
    return res
______________________________________________________________________________

1161. Maximum Level Sum of a Binary Tree    (BFS)
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def maxLevelSum(self, root: TreeNode) -> int:
        if not root: return 0
        q = collections.deque([])
        q.append(root)
        level = 1
        res = float('-inf')
        ans = 1
        while q:
            n = len(q)
            temp = 0
            for i in range(n):
                node = q.popleft()
                temp += node.val
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
            if temp > res:
                res = temp
                ans = level
            level += 1
        return ans
______________________________________________________________________________

8. String to Integer (atoi)
def myAtoi(self, str: str) -> int:
    s = str.strip()
    if not s: return 0
    table = {
        "1": 1,
        "2": 2,
        "3": 3,
        "4": 4,
        "5": 5,
        "6": 6,
        "7": 7,
        "8": 8,
        "9": 9,
        "0": 0,
    }
    res = 0
    mx = 2**31-1
    mi = -2**31
    if s[0] == '-':
        positive = False
        s = s[1:]
    elif s[0] == '+':
        s = s[1:]
        positive = True
    elif s[0].isdigit():
        positive = True
    else:
        return 0
    for digit in s:
        if digit in table:
            res = res*10 + table[digit]
        else:
            break
    return min(mx,res) if positive else max(-res,mi)
______________________________________________________________________________

17. Letter Combinations of a Phone Number   (DFS)
def letterCombinations(self, digits: str) -> List[str]:
    if not digits:
        return []
    self.table = {
        '2': 'abc',
        '3': 'def',
        '4': 'ghi',
        '5': 'jkl',
        '6': 'mno',
        '7': 'pqrs',
        '8': 'tuv',
        '9': 'wxyz'
    }
    self.res = []
    self.dfs(digits,0,'')
    return self.res

def dfs(self,digits,index,letters):
    if len(letters) == len(digits):
        self.res.append(letters)
        return
    value = self.table[digits[index]]
    for letter in value:
        self.dfs(digits,index+1,letters+letter)
______________________________________________________________________________

528. Random Pick with Weight
class Solution:

    def __init__(self, w: List[int]):
        self.w = w
        self.n = len(w)
        for i in range(1,self.n):
            self.w[i] += self.w[i-1]
        self.max = self.w[-1]

    def pickIndex(self) -> int:
        seed = random.randint(1,self.max)
        l,r = 0, self.n-1
        while l<r:
            mid = l + (r-l)//2
            if self.w[mid] < seed:
                l = mid + 1
            else:
                r = mid
        return l
______________________________________________________________________________

46. Permutations      O(N*N!)  space(N!)
def permute(self, nums: List[int]) -> List[List[int]]:
    if not nums: return []
    self.res = []
    visited = [False]*(len(nums)+1)
    self.dfs(nums,visited,[])
    return self.res

def dfs(self,nums,visited,subset):
    if len(subset) == len(nums):
        self.res.append(subset)
        return
    for i in range(len(nums)):
        if not visited[i]:
            visited[i] = True
            subset.append(nums[i])
            self.dfs(nums,visited,subset.copy())
            visited[i] = False
            subset.remove(nums[i])
______________________________________________________________________________

1155. Number of Dice Rolls With Target Sum    O(target*dices*faces)
def numRollsToTarget(self, d: int, f: int, target: int) -> int:
    dp = [[0 for _ in range(target+1)] for _ in range(d+1)]
    dp[0][0] = 1
    for i in range(1,d+1):
        for j in range(1,f+1):
            for k in range(j,target+1):
                dp[i][k] = (dp[i][k] + dp[i-1][k-j])%(10**9+7)
    return dp[d][target]
______________________________________________________________________________

31. Next Permutation
def nextPermutation(self, nums: List[int]) -> None:
    """
    Do not return anything, modify nums in-place instead.
    """
    if not nums or len(nums) < 2: return
    i = len(nums)-1
    while i>0 and nums[i-1] >= nums[i]:
        i -= 1
    if i == 0:
        nums.sort()
    else:
        j = len(nums)-1
        while nums[j] <= nums[i-1]:
            j -= 1
        nums[j],nums[i-1] = nums[i-1],nums[j]
        n = len(nums)-1
        while i < n:
            nums[i],nums[n] = nums[n],nums[i]
            i += 1
            n -= 1
______________________________________________________________________________

91. Decode Ways       (DP)
def numDecodings(self, s: str) -> int:
    dp = [1]+[0]*len(s)
    for i in range(1,len(dp)):
        if s[i-1] != '0':
            dp[i] = dp[i-1]
        if i > 1 and 10 <= int(s[i-2:i]) <= 26:
            dp[i] += dp[i-2]
    return dp[-1]
______________________________________________________________________________

78. Subsets                       O(N*2^N)
                                  N = length of nums, and 2^n subsets
def subsets(self, nums: List[int]) -> List[List[int]]:
    if not nums: return []
    self.res = []
    self.dfs(nums,0,[])
    return self.res

def dfs(self,nums,index,subset):
    if not nums:
        return
    self.res.append(subset)
    for i in range(index,len(nums)):
        self.dfs(nums,i+1,subset+[nums[i]])

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
def subsets(self, nums: List[int]) -> List[List[int]]:
    subsets = [[]]
    for num in nums:
        subsets += [[num] + lst for lst in subsets]
    return subsets
______________________________________________________________________________

116. Populating Next Right Pointers in Each Node
117. Populating Next Right Pointers in Each Node II
"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""
class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if not root: return root
        q = collections.deque([])
        q.append(root)
        while q:
            n = len(q)
            for i in range(n):
                node = q.popleft()
                if i < n-1:
                    node.next = q[0]
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
        return root
______________________________________________________________________________

12. Integer to Roman
def intToRoman(self, num: int) -> str:
    symbols = ['M','CM','D','CD','C','XC','L','XL','X','IX','V','IV','I']
    values = [1000, 900, 500, 400,100,90,50,40,10,9,5,4,1]
    res = ''
    for i in range(len(values)):
        while num >= values[i]:
            num -= values[i]
            res += symbols[i]
    return res
______________________________________________________________________________

24. Swap Nodes in Pairs
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def swapPairs(self, head: ListNode) -> ListNode:
        if not head or not head.next: return head
        dummy = ListNode(-1)
        dummy.next = head
        temp = dummy
        while head and head.next:
            p1 = head
            p2 = head.next
            
            p1.next = p2.next
            p2.next = p1
            temp.next = p2
            
            temp = p1
            head = p1.next
        return dummy.next
______________________________________________________________________________

29. Divide Two Integers             (bit)
def divide(self, dividend: int, divisor: int) -> int:
    positive = (dividend > 0) is (divisor > 0)
    dividend,divisor = abs(dividend),abs(divisor)
    mi,mx = -2147483648, 2147483647
    res = 0
    while dividend >= divisor:
        temp, times = divisor, 1
        while dividend >= temp:
            res += times
            dividend -= temp
            temp <<= 1
            times <<= 1
    return min(res,mx) if positive else max(-res,mi)
______________________________________________________________________________

1060. Missing Element in Sorted Array       (Binary Search)
def missingElement(self, nums: List[int], k: int) -> int:
    missing = lambda index:nums[index]-nums[0]-index
    n = len(nums)
    if k > missing(n-1):
        return nums[n-1] + k - missing(n-1)
    l,r = 0, n-1
    while l < r:
        mid = l + (r-l)//2
        if missing(mid) < k:
            l = mid + 1
        else:
            r = mid
    return nums[l-1] + k - missing(l-1)
______________________________________________________________________________

236. Lowest Common Ancestor of a Binary Tree    (DFS)
def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
    if not root or root == p or root == q:
        return root
    left = self.lowestCommonAncestor(root.left,p,q)
    right = self.lowestCommonAncestor(root.right,p,q)
    if left and right:
        return root
    return left if left else right
______________________________________________________________________________

37. Sudoku Solver       (backtracking)  O((9!)^9)
def solveSudoku(self, board: List[List[str]]) -> None:
    """
    Do not return anything, modify board in-place instead.
    """
    self.dfs(board)  

def validate(self,board,r,c):
    value = board[r][c]
    board[r][c] = '.'
    for i in range(9):
        if board[r][i] == value: return False
        if board[i][c] == value: return False
    for i in range(3):
        for j in range(3):
            if board[r//3*3+i][c//3*3+j] == value:
                return False
    board[r][c] = value
    return True

def dfs(self,board):
    for r in range(9):
        for c in range(9):
            if board[r][c] == '.':
                for digit in '123456789':
                    board[r][c] = digit
                    if self.validate(board,r,c) and self.dfs(board):
                        return True
                    board[r][c] = '.'
                return False
    return True
______________________________________________________________________________

23. Merge k Sorted Lists   O(NlogK) k is len(lists), N is length of one list in lists
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        if not lists:
            return None
        while len(lists) > 1:
            temp = []
            for index in range(0,len(lists)-1,2):
                temp.append(self.merge(lists[index],lists[index+1]))
            if len(lists)%2 == 1:
                temp.append(lists[-1])
            lists = temp
        return lists[0]
        
    def merge(self,list1,list2):
        dummy = ListNode(0)
        l = dummy
        while list1 and list2:
            if list1.val < list2.val:
                l.next = list1
                list1 = list1.next
            else:
                l.next = list2
                list2 = list2.next
            l = l.next
            
        if not list1:
            l.next = list2
        if not list2:
            l.next = list1
            
        return dummy.next
______________________________________________________________________________

340. Longest Substring with At Most K Distinct Characters   (hashmap)
def lengthOfLongestSubstringKDistinct(self, s: str, k: int) -> int:
    if not s: return 0
    hashmap = collections.defaultdict(int)
    res = 0
    l,r = 0,0
    while r < len(s):
        hashmap[s[r]] += 1
        while len(hashmap) > k:
            hashmap[s[l]] -= 1
            if hashmap[s[l]] == 0:
                del hashmap[s[l]]
            l += 1
        res = max(res,r-l+1)
        r += 1
    return res
______________________________________________________________________________

992. Subarrays with K Different Integers
def subarraysWithKDistinct(self, A: List[int], K: int) -> int:
    return self.atMostK(A,K) - self.atMostK(A,K-1)

def atMostK(self,A,k):
    if not A: return 0
    l,r=0,0
    ans = 0
    hashmap = collections.defaultdict(int)
    while r < len(A):
        hashmap[A[r]] += 1
        while len(hashmap) > k:
            hashmap[A[l]] -= 1
            if hashmap[A[l]] == 0:
                del hashmap[A[l]]
            l += 1
        ans += r-l+1
        r += 1
    return ans
______________________________________________________________________________

358. Rearrange String k Distance Apart          O(NlogA)
                                                N: length of s
                                                A: size of alphabet
def rearrangeString(self, s: str, k: int) -> str:
    if k == 0 or len(s) < k:
        return s
    count = collections.defaultdict(int)
    for n in s:
        count[n] += 1
    h = []
    for key,value in count.items():
        heapq.heappush(h,[-value,key])
    res = ''
    while h:
        temp = []
        for i in range(k):
            t = heapq.heappop(h)
            res += t[1]
            temp.append(t)
            if not h:
                if i != k-1 and len(res) != len(s):
                    return ''
                break
        for x in temp:
            x[0] += 1
            if x[0] < 0:
                heapq.heappush(h,x)
    return res
______________________________________________________________________________

767. Reorganize String    (heapq, hashmap)    O(NlogA)
                                                N: length of s
                                                A: size of alphabet
def reorganizeString(self, S: str) -> str:
    if not S: return ''
    count = collections.defaultdict(int)
    for s in S:
        count[s] += 1
    if max(count.values()) > (len(S)+1)//2:
        return ''
    h = []
    res = ""
    for key,value in count.items():
        heapq.heappush(h,[-value,key])

    while len(h) > 1:
        v1,k1 = heapq.heappop(h)
        v2,k2 = heapq.heappop(h)
        res += k1 + k2
        v1 += 1
        v2 += 1
        if v1 < 0:
            heapq.heappush(h,[v1,k1])
        if v2 < 0:
            heapq.heappush(h,[v2,k2])
    if h:
        res += heapq.heappop(h)[1]
    return res

______________________________________________________________________________

460. LFU Cache          (DoubleLinkedList)
class Node:
    def __init__(self,key,value):
        self.key = key
        self.val = value
        self.cnt = 1
        self.next = None
        self.prev = None

class DoubleLinkedLists:
    def __init__(self):
        self.head = Node(0,0)
        self.tail = Node(0,0)
        self.len = 0
        self.head.next = self.tail
        self.tail.prev = self.head
    
    def addHead(self,node):
        next1 = self.head.next
        self.head.next = node
        node.prev = self.head
        node.next = next1
        next1.prev = node
        self.len += 1
    
    def remove(self,node):
        previous = node.prev
        next1 = node.next
        previous.next = next1
        next1.prev = previous
        self.len -= 1
    
    def removeTail(self):
        p = self.tail.prev
        self.remove(p)
        
        
class LFUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.size = 0
        self.table = collections.defaultdict(Node)
        self.freq = collections.defaultdict(DoubleLinkedLists)

    def get(self, key: int) -> int:
        if key not in self.table: return -1
        node = self.table[key]
        self.freq[node.cnt].remove(node)
        node.cnt += 1
        self.freq[node.cnt].addHead(node)
        return node.val

    def put(self, key: int, value: int) -> None:
        if self.capacity == 0: return
        if key in self.table:
            node = self.table[key]
            node.val = value
            self.get(key)
            return
        else:
            if self.capacity == self.size:
                for linkedlist in self.freq.values():
                    if linkedlist.len > 0:
                        node = linkedlist.tail.prev
                        del self.table[node.key]
                        self.size -= 1
                        linkedlist.removeTail()
                        break
            node = Node(key,value)
            self.table[key] = node
            self.size += 1
            self.freq[node.cnt].addHead(node)
______________________________________________________________________________

124. Binary Tree Maximum Path Sum       O(N), space is O(H)
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        if not root:
            return -2**31
        self.res = float('-inf')
        self.dfs(root)
        return self.res
    
    def dfs(self,root):
        left = max(self.dfs(root.left),0) if root.left else 0
        right = max(self.dfs(root.right),0) if root.right else 0
        cur = left + right + root.val
        self.res = max(self.res, cur)
        return root.val + max(left,right)
______________________________________________________________________________

4. Median of Two Sorted Arrays      (Binary search)
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        n1,n2 = len(nums1),len(nums2)
        if n1 > n2:
            return self.findMedianSortedArrays(nums2,nums1)
        k = (n1+n2+1)//2
        l,r=0,n1
        while l < r:
            m1 = l + (r-l)//2
            m2 = k - m1
            if nums1[m1] < nums2[m2-1]:
                l = m1 + 1
            else:
                r = m1
        m1 = l
        m2 = k - l
        c1 = max(nums1[m1-1] if m1 > 0 else float('-inf'), nums2[m2-1] if m2 > 0 else float('-inf'))
        if (n1+n2)%2==1:
            return c1
        c2 = min(nums1[m1] if m1 < n1 else float('inf'), nums2[m2] if m2 < n2 else float('inf'))
        return (c1+c2)/2
______________________________________________________________________________

1192. Critical Connections in a Network         log(u+v)    u: # of nodes,
                                                            v: # of neighbors
    def criticalConnections(self, n: int, connections: List[List[int]]) -> List[List[int]]:
        graph = collections.defaultdict(list)
        for x,y in connections:
            graph[x].append(y)
            graph[y].append(x)
        ranks = [i for i in range(n)]
        visited = [False]*n
        prevNode = -1
        currentNode = 0
        currentRank = 0
        self.res = []
        self.dfs(graph,visited,ranks,currentRank,prevNode,currentNode)
        return self.res
    
    def dfs(self,graph,visited,ranks,currentRank,prevNode,currentNode):
        visited[currentNode] = True
        ranks[currentNode] = currentRank
        for nextNode in graph[currentNode]:
            if nextNode == prevNode:
                continue
            if not visited[nextNode]:
                self.dfs(graph,visited,ranks,currentRank+1,currentNode,nextNode)
            ranks[currentNode] = min(ranks[currentNode],ranks[nextNode])
            if ranks[nextNode] == currentRank + 1:
                self.res.append([currentNode,nextNode])

______________________________________________________________________________

1. Two Sum
def twoSum(self, nums: List[int], target: int) -> List[int]:
    if not nums: return []
    hashmap = dict()
    for i in range(len(nums)):
        if nums[i] in hashmap:
            return [hashmap[nums[i]],i]
        else:
            hashmap[target-nums[i]] = i
______________________________________________________________________________

167. Two Sum II - Input array is sorted
def twoSum(self, numbers: List[int], target: int) -> List[int]:
    if not numbers: return []
    l,r = 0, len(numbers)-1
    while l < r:
        if numbers[l] + numbers[r] == target:
            return [l+1, r+1]
        elif numbers[l] + numbers[r] < target:
            l += 1
        else:
            r -= 1
    return []
______________________________________________________________________________

653. Two Sum IV - Input is a BST

# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def findTarget(self, root: TreeNode, k: int) -> bool:
        if not root: return root
        hashmap = dict()
        stack = []
        stack.append(root)
        while stack:
            n = len(stack)
            for _ in range(n):
                node = stack.pop()
                if node.val in hashmap:
                    return True
                hashmap[k-node.val] = node.val
                if node.right:
                    stack.append(node.right)
                if node.left:
                    stack.append(node.left)
        return False
______________________________________________________________________________

371. Sum of Two Integers
def getSum(self, a: int, b: int) -> int:
    mask = 0x100000000
    max_int = 0x7FFFFFFF
    while b != 0:
        carry = a&b
        a = (a^b) % mask
        b = (carry<<1) % mask
    return a if a <= max_int else a | (~mask+1)
______________________________________________________________________________

1232. Check If It Is a Straight Line
def checkStraightLine(self, coordinates: List[List[int]]) -> bool:
    res = set()
    for i in range(1,len(coordinates)):
        dx = coordinates[i][0] - coordinates[i-1][0]
        dy = coordinates[i][1] - coordinates[i-1][1]
        if dx == 0:
            res.add(0)
        else:
            res.add(dy/dx)
    return True if len(res) == 1 else False
______________________________________________________________________________

290. Word Pattern
def wordPattern(self, pattern: str, str: str) -> bool:
    if not pattern and not str:
        return False
    words = str.split(" ")
    if len(words) != len(pattern):
        return False
    match = {}
    visited = []
    for x,y in zip(pattern,words):
        if x in match:
            if match[x] != y:
                return False
        else:
            if y in visited:
                return False
            visited.append(y)
            match[x] = y
    return True

______________________________________________________________________________

70. Climbing Stairs
def climbStairs(self, n: int) -> int:
    if n == 0: return 0
    prev,cur = 0,1
    for i in range(n):
        prev,cur = cur,prev+cur
    return cur
______________________________________________________________________________

53. Maximum Subarray
def maxSubArray(self, nums: List[int]) -> int:
    if not nums: return 0
    subSum = nums[0]
    ans = nums[0]
    for n in nums[1:]:
        subSum = max(n,subSum+n)
        ans = max(ans,subSum)
    return ans
______________________________________________________________________________

482. License Key Formatting
def licenseKeyFormatting(self, s: str, k: int) -> str:
    if not s: return ''
    s =''.join(s.upper().split('-'))
    s = s[::-1]
    res = ''
    for i in range(len(s)):
        if i%k == 0 and i != 0:
            res += '-' + s[i]
        else:
            res += s[i]
    return res[::-1]
______________________________________________________________________________

1160. Find Words That Can Be Formed by Characters
def countCharacters(self, words: List[str], chars: str) -> int:       
    res = 0
    for word in words:
        cnt = 0
        temp = list(chars)
        for w in word:
            if w in temp:
                temp.remove(w)
                cnt += 1
        if cnt == len(word):
            res += cnt
    return res
______________________________________________________________________________

121. Best Time to Buy and Sell Stock
def maxProfit(self, prices: List[int]) -> int:
    if not prices: return 0
    m = prices[0]
    maxProfit = 0
    for n in prices[1:]:
        m = min(m,n)
        maxProfit = max(maxProfit,n-m)
    return maxProfit
______________________________________________________________________________

20. Valid Parentheses
def isValid(self, s: str) -> bool:
    if not s: return True
    if len(s)%2 != 0: return False
    table = {
        ')':'(',
        '}':'{',
        ']':'['
    }
    stack = []
    for c in s:
        if c == '{' or c == '[' or c == '(':
            stack.append(c)
        else:
            if not stack or stack[-1] != table[c]:
                return False
            stack.pop()
    return True if not stack else False
______________________________________________________________________________

112. Path Sum
def hasPathSum(self, root: TreeNode, sum: int) -> bool:
    if not root: return False
    if root.left == root.right and root.val == sum:
        return True
    return self.hasPathSum(root.left,sum-root.val) or self.hasPathSum(root.right,sum-root.val) 
______________________________________________________________________________

734. Sentence Similarity
def areSentencesSimilar(self, words1: List[str], words2: List[str], pairs: List[List[str]]) -> bool:
    if len(words1) != len(words2): return False
    for w1,w2 in zip(words1,words2):
        if not(w1==w2 or [w1,w2] in pairs or [w2,w1] in pairs):
            return False
    return True
______________________________________________________________________________

252. Meeting Rooms
def canAttendMeetings(self, intervals: List[List[int]]) -> bool:
    if not intervals:
        return True
    intervals.sort(key = lambda x:x[0])
    occupy = intervals[0]
    for interval in intervals[1:]:
        if interval[0] < occupy[1]:
            return False
        occupy = interval
    return True
______________________________________________________________________________

110. Balanced Binary Tree
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
        if not root: return True
        if self.dfs(root) == -1:
            return False
        return True
    
    def dfs(self,root):
        if not root: return 0
        left = self.dfs(root.left) if root.left else 0
        if left == -1: return -1
        right = self.dfs(root.right) if root.right else 0
        if right == -1: return -1
        return max(left,right)+1 if abs(left-right) <= 1 else -1

______________________________________________________________________________

104. Maximum Depth of Binary Tree
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if not root: return 0
        return self.depth(root)
    
    def depth(self,root):
        if not root: return 0
        return max(self.depth(root.left),self.depth(root.right))+1
______________________________________________________________________________

111. Minimum Depth of Binary Tree
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def minDepth(self, root: TreeNode) -> int:
        if not root: return 0
        if root.left and root.right:
            return min(self.minDepth(root.left),self.minDepth(root.right)) + 1
        elif not root.left:
            return self.minDepth(root.right) + 1
        elif not root.right:
            return self.minDepth(root.left)+1

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    def minDepth(self, root: TreeNode) -> int:
        if not root: return 0
        q = collections.deque([])
        q.append([root,1])
        while q:
            node,depth = q.popleft()
            children = [node.left,node.right]
            if not any(children):
                return depth
            if node.left:
                q.append([node.left,depth+1])
            if node.right:
                q.append([node.right,depth+1])

______________________________________________________________________________

559. Maximum Depth of N-ary Tree
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
"""
class Solution:
    def maxDepth(self, root: 'Node') -> int:
        if not root: return 0
        return self.dfs(root)
    
    def dfs(self,root):
        if not root: return 0
        if not root.children: return 1
        return max(self.dfs(child) for child in root.children if child) + 1
______________________________________________________________________________

9. Palindrome Number
def isPalindrome(self, x: int) -> bool:
    if x < 0 or x%10 == 0 and x != 0: return False
    reverse = 0
    while reverse < x:
        reverse = reverse*10 + x%10
        x //= 10
    return x == reverse or x == reverse//10
______________________________________________________________________________

234. Palindrome Linked List
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        if not head: return True
        slow = head
        fast = head
        while fast.next and fast.next.next:
            slow = slow.next
            fast = fast.next.next
        second = slow.next
        slow.next = None
        
        prev = None
        while second:
            next1 = second.next
            second.next = prev
            prev = second
            second = next1
        
        while prev and head:
            if head.val != prev.val:
                return False
            head = head.next
            prev = prev.next

        return True
______________________________________________________________________________

14. Longest Common Prefix
def longestCommonPrefix(self, words: List[str]) -> str:
    if not words:
        return ""
    prefix = words[0]
    for word in words[1:]:
        while word.find(prefix) != 0:
            prefix = prefix[:-1]
            if len(prefix) == 0:
                return ""
    return prefix
______________________________________________________________________________

26. Remove Duplicates from Sorted Array
def removeDuplicates(self, nums: List[int]) -> int:
    if not nums: return 0
    index = 0
    while index < len(nums)-1:
        if nums[index] == nums[index+1]:
            del nums[index+1]
            index -= 1
        index += 1
    return len(nums)
______________________________________________________________________________

1290. Convert Binary Number in a Linked List to Integer
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getDecimalValue(self, head: ListNode) -> int:
        if not head: return head
        ans = 0
        while head:
            ans = ans*10 + head.val
            head = head.next
        return int(str(ans),2)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
def getDecimalValue(self, head: ListNode) -> int:
    if not head: return head
    ans = 0
    while head:
        ans = ans*10 + head.val
        head = head.next
    return self.convert(str(ans))

def convert(self,b):
    val = 0
    for i,digit in enumerate(reversed(b)):
        if digit == '1':
            val += 2**i
    return val
______________________________________________________________________________

1119. Remove Vowels from a String
def removeVowels(self, s: str) -> str:
    if not s: return ''
    res = ''
    vowels = set('aeiou')
    for chars in s:
        if chars in vowels:
            continue
        res += chars
    return res
______________________________________________________________________________

1108. Defanging an IP Address
def defangIPaddr(self, address: str) -> str:
    if not address:
        return address
    res = ''
    for c in address:
        if c == '.':
            res += "[.]"
        else:
            res += c
    return res
______________________________________________________________________________

938. Range Sum of BST
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def rangeSumBST(self, root: TreeNode, L: int, R: int) -> int:
        if not root: return 0
        self.res = 0
        self.dfs(root,L,R)
        return self.res
    
    def dfs(self,root,l,r):
        if not root: return
        if root.val > l:
            self.dfs(root.left,l,r)
        if root.val < r:
            self.dfs(root.right,l,r)
        if l<= root.val <= r:
            self.res += root.val
______________________________________________________________________________

1086. High Five
def highFive(self, items: List[List[int]]) -> List[List[int]]:
    table = collections.defaultdict(list)
    for id,score in items:
        heapq.heappush(table[id],score)
        if len(table[id]) > 5:
            heapq.heappop(table[id])
    return [[id,sum(scores)//5] for id, scores in table.items()]
______________________________________________________________________________

977. Squares of a Sorted Array
def sortedSquares(self, nums: List[int]) -> List[int]:
    if not nums: return []
    l,r = 0, len(nums)-1
    res = []
    while l <= r:
        if nums[l]**2 < nums[r]**2:
            res.append(nums[r]**2)
            r -= 1
        else:
            res.append(nums[l]**2)
            l += 1
    return res[::-1]
______________________________________________________________________________

1304. Find N Unique Integers Sum up to Zero
    def sumZero(self, n: int) -> List[int]:
        if n <= 0: return []
        if n == 1: return [0]
        res = []
        for i in range(1,n):
            res.append(i)
        res.append(-sum(res))
        return res
______________________________________________________________________________

42. Trapping Rain Water
def trap(self, height: List[int]) -> int:
    if not height: return 0
    leftmax = height[0]
    rightmax = height[-1]
    l,r = 0, len(height)-1
    res = 0
    while l <= r:
        leftmax = max(leftmax,height[l])
        rightmax = max(rightmax,height[r])
        if leftmax < rightmax:
            res += leftmax - height[l]
            l += 1
        else:
            res += rightmax - height[r]
            r -= 1
    return res
______________________________________________________________________________

32. Longest Valid Parentheses
def longestValidParentheses(self, s: str) -> int:
    if not s: return 0
    stack = [-1]
    res = 0
    for index,char in enumerate(s):
        if char == '(':
            stack.append(index)
        else:
            stack.pop()
            if stack:
                res = max(res,index-stack[-1])
            else:
                stack.append(index)
    return res
______________________________________________________________________________

144. Binary Tree Preorder Traversal
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        if not root: return []
        res = []
        stack = [root]
        while stack:
            node = stack.pop()
            if node.right:
                stack.append(node.right)
            if node.left:
                stack.append(node.left)
            res.append(node.val)
        return res

______________________________________________________________________________

145. Binary Tree Postorder Traversal
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def postorderTraversal(self, root: TreeNode) -> List[int]:
        if not root: return
        stack = []
        stack.append(root)
        res = []
        while stack:
            node = stack.pop()
            if node.left:
                stack.append(node.left)
            if node.right:
                stack.append(node.right)
            res.insert(0,node.val)
        return res
______________________________________________________________________________

______________________________________________________________________________
stop
______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________



______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________




______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________




______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________




______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________




______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________




______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________



______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________




______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________




______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________




______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________




______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________




______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________




______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________




______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________




______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________




______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________




______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________




______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________

______________________________________________________________________________
